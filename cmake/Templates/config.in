#!/bin/sh

#-----------------------------------------------------------------------
# sh config query script for @PROJECT_NAME@ @VERSION@ on UNIX platforms
# Autogenerated by CMake DO NOT EDIT
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Determine location of this script.
# NB, we don't always use the result of this calculation, but it does not
# hurt to do it. Only possible error is if too long a chain of symbolic 
# links are used to point to the physical script.
#
# Resolve symbolic links to script - we should end up with a physical file
script="$0"
calldir=`pwd`
loopcount=""

while [ "x`readlink $script`" != "x" ] ; do
  preloc=`dirname $script`
  script=`readlink $script`

  if [ ${script##/} = ${script##~} ] ; then
    # The symbolic link was relative...
    script="$preloc/$script"
  fi
  loopcount="l$loopcount"

  if [ ${#loopcount} -gt 10 ] ; then
    echo "error: more than 10 symbolic links to @LC_PROJECT_NAME@-config traversed."
    exit 1
  fi
done

# If we still have a relative path, then it must be relative to the 
# calling dir. NB we don't attempt to resolve directory symbolic 
# links or remove '.' or '..'
if [ ${script##/} = ${script##~} ] ; then
  script="$calldir/$script"
fi

#-----------------------------------------------------------------------
# Finally, grab the directory in which the script is located
# Used below should we be setup to be relocatable.
scriptloc=`dirname $script`

#-----------------------------------------------------------------------
# Expansion and calculation of all needed variables
#
prefix=@CONFIG_INSTALL_PREFIX@
exec_prefix=@CONFIG_EXECPREFIX@
libdir=@CONFIG_LIBDIR@
includedirs="@CONFIG_INCLUDE_DIRS@"




name="@LC_PROJECT_NAME@"
description="@PROJECT_DESCRIPTION@"
version="@PROJECT_VERSION@"


#-----------------------------------------------------------------------
# Core setup...
#
cflags=""
cdef="@PREPROCESSOR_DEFS@"

for incdir in ${includedirs} ; do
    cflags="${cflags} -I${incdir}"
done

libs=""
mylibs="@PROJECT_LIBRARIES@"

for linkedlibs in ${mylibs} ; do
    libs="${libs} -l${linkedlibs}"
done

extra_libs="@CONFIG_LINKED_LIBS@"
for linkedlibs in ${extra_libs} ; do
    libs="${libs} -l${linkedlibs}"
done


#-----------------------------------------------------------------------
# - Extra optional features that were enabled.
# - ALL
feature_list=""



#-----------------------------------------------------------------------
# function help
#          print help on available command line arguments and enabled
#          and disabled features of the toolkit
#
help()
{
    cat<<EOF
Usage: @LC_PROJECT_NAME@-config [OPTION...]
    --prefix                output installation prefix of @PROJECT_NAME@
    --version               output version for @PROJECT_NAME@
    --libs                  output all linker flags
    --cflags                output all preprocessor
                            and compiler flags
    --info                  output description

    --has-feature FEATURE   output yes if FEATURE is supported,
                            or no if not supported

Known Features:
EOF
    for f in ${feature_list} ; do
        echo " $f"
    done

    cat<<EOF

    Help options:
    -?, --help              show this help message
    --usage                 display brief usage message
EOF

    exit 1
}

#-----------------------------------------------------------------------
# function usage
#          print basic usage message
#
usage()
{
cat<<EOF
Usage: @LC_PROJECT_NAME@-config [--help] [--prefix] [--version] [--libs] [--cflags] [--info] [--has-feature]
EOF
    exit 1
}


#-----------------------------------------------------------------------
# Process arguments
#
if test $# -eq 0 ; then
    usage
fi

while test $# -gt 0 ; do
    case "$1" in
      -*=*)
        optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'`
        ;;
      *)
        optarg=
        ;;
    esac

    case "$1" in
      --prefix)
        echo ${prefix}
        ;;

      --version)
        echo ${version}
        ;;

      --libs)
        echo "-L${libdir}" ${libs}
        ;;

      --cflags)
        echo ${cflags}
        ;;

      --info)
          echo ${description}
        ;;
        
      --has-feature)
        shift

        case "$1" in
          *)
            echo "no"
            ;;
         

        esac
        ;;


      -?)
        help
        ;;

      --help)
        help
        ;;

      --usage)
        usage
        ;;

      *)
        usage
        ;;
    esac

    # move to the next command --> next command becomes $1
    shift
done

# Finally...
exit 0
